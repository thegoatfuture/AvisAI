// schema.prisma — Modèle de données optimisé pour un SaaS IA avec NextAuth + Système d'avis

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 🧑 Utilisateur du système (authentifié via NextAuth)
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // 🔐 Liens avec les tables OAuth / sessions
  accounts      Account[]
  sessions      Session[]
  reviews       Review[] // 🔁 Relation avec les avis

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 🗣️ Avis généré par un utilisateur via IA
model Review {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// 🔐 Compte OAuth lié à un utilisateur
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// 🧠 Session active d’un utilisateur
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

// 📩 Token de vérification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}